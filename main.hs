import Needleman 
import ProgressiveAlignment
import Distances
import UPGMA
import qualified Data.Map as Map

-- Sequences and their labels to build phylogenetic tree from (no parser implemented). 
labels = ["Chimp_Verus","Chimp_Trogl","Europ_human","Orangu_Jari","Gor_Eastern","Neanthe_Rus","Orangu_Puti","Chimp_Velle","Chimp_Schew","Neanthe_Ger","Gor_Mountai","Gor_Western"]
sequences = ["ctgccagtcaccatgaatattgtacagtaccataatcacccaactacctataatacataaaatccactcccacaccaaaaccttcaccccatgcttacaagcacgcacaacaatcaacctccaactgtcaaacataaaacacaactccaacgacacccctcccccaccccgataccaacagacctaccccccttgacagaacatagtacatacaatcatacaccgtacatagcacattacagtcaaactcttcctcgtccccacggatgccccccctcagatagg","cctaagtattggcctattcattacaaccgctatgtatttcgtacattactgccagccaccatgaatattgtacagtactataaccactcaactacctataatacattaagcccacccccacattacaacctccaccctatgcttacaagcacgcacaacaatcaacccccaactgtcacacataaaatgcaactccaaagacacccctctcccaccccgataccaacaaacctatgcccttttaacagtacatagtacatacagccgtacatcgcacatagcacattacagtcaaatccatccttgcccccacggatgccccccctcagatagg","ccaagtattgacttacccatcaacaaccgctatgtatttcgtacattactgccagccaccatgaatattgcacggtaccataaatacttgaccacctgtagtacataaaaacccaatccacatcaaaaccccctccccatgcttacaagcaagtacagcaatcaaccctcaactatcacacatcaactgcaactccaaagccacccctcacccactaggataccaacaaacctacccacccttaacagtacatagtacataaagccatttaccgtacatagcacattacagtcaaatcccttctcgtccccatggatgacccccctca","ccaatactgacccatttctaacggcctatgtatttcgtacattcctgctagccaacatgaatatcacccaacacaacaatcgcttaaccaactataatgcatacaaaactccaaccacactcgacctccacaccccgcttacaagcaagtacccccccatgcccccccacccaaacacatacaccgatctctccacataacccctcaacccccagcatatcaacagaccaaacaaaccttaaagtacatagcacatactatcctaaccgcacatagcacatcccgttaaaaccctgctcatccccacggatgccccccctcagttagtaatccctt","cctaagtattagttaacccaccaataattgtcatgtatttcgtgcattactgccagccaccatgaataatgtacggtaccataaacactccctcacctataatacattaccccccctcaccccccatcccttgcccaccccaacagcataccaactaacctacccctctacaaaagtacatagtacataaaatcatttaccgtccatagcacattccagttaaaccatcctcgcccccacggatgccccccctcagataggggtcccttaaacaccatcctccgtgaaatcaatatcccgcacaagagtgctactctcctcgctccgggcccataacgcctgg","ccaagtattgactcacccatcaacaaccgccatgtatttcgtacattactgccagccaccatgaatattgtacagtaccataattacttgactacctgtaatacataaaaacctaatccacatcaaccccccccccccatgcttacaagcaagcacagcaatcaaccttcaactgtcatacatcaactacaactccaaagacacccttacacccactaggatatcaacaaacctacccacccttgacagtacatagcacataaagtcatttaccgtacatagcacattatagtcaaatcccttctcgcccccatggatgacccccctcagataggggtcccttga","ccagtactgacccatttctaacggcctatgtatttcgtacattcctgctagccaacatgaatatcacccaacacaacaatcgcttaaccaactataatgcatacaaaactccaaccacactcgacctccacaccccgcttacaagcaagtacccccccatgcccccccacccaaacacatacaccgatctctccacataacccctcaacccccagcatatcaacagaccaaacaaaccttaaagtacatagcacatactatcctaaccgcacatagcacatcccgttaaaaccctgctcatccccacggatgccccccctcagttagtaatcccttactcac","cctaagtactggctcattcattacaaccgctatgtatttcgtacattactgccagccaccatgaatattgtacagtaccacaatcactcaactacctataatacataaaacccacccccacatcaaaacctccaccccatgcttacaagcatgcacaacaatcaacccccaactgtcgaacataaaacacaactccaacgacattcctacccactccgataccaacagacttattcctccttaataggacatagcacatacaatcacacaccgtacatagcacattacagtcaaatccatcctcgcccccacggatgacccccctcagata","cctaagtattggcttattcattacaaccgctatgtatttcgtacattactgccagccaccatgaatattgtacagtactataatcactcaactacctataatacatcaaacccaccccacattacaacctccaccctatgcttacaagcacgcacaacaattaaccctcaactgtcacacataaaacacaactccaaagacattcctcccccaccccgataccaacagacctatactctcttaacagtacatagtacatacaaccgtacaccatacatagcacattacagtcaaatccatcctcgcccccacggatgccccccctcagatagg","ccaagtattgactcacccatcagcaaccgctatgtatctcgtacattactgttagttaccatgaatattgtacagtaccataattacttgactacctgcagtacataaaaacctaatccacatcaaacccccccccccatgcttacaagcaagcacagcaatcaaccttcaactgtcatacatcaactacaactccaaagacgcccttacacccactaggatatcaacaaacctacccacccttgacagtacatagcacataaagtcatttaccgtacatagcacattacagtcaaatcccttctcgcccccatggatgacccccctcagataggggtcccttgat","ccaagtattagttaacccaccaataattgtcatgtatgtcgtgcattactgccagccaccatgaataatgtacagtaccacaaacactcccccacctataatacattaccccccctcaccccccattccctgctcaccccaacggcataccaaccaacctatcccctcacaaaagtacataatacataaaatcatttaccgtccatagtacattccagttaaaccatcctcgcccccacggatgccccccttcagatagggatcccttaaacaccatcctccgtgaaatcaatatcccgcacaagagtgctactctcctcgctccgggcccataacacctgg","ccaagtattagctaacccatcaataattatcatgtatatcgtgcatcactgccagacaccatgaataatgtacggtaccataaacgcccaatcacctgtagcacatacaaccccccccttccccccccccgcattgcccaacggaatacnaaataacccatccctcacaaaaagtacataacacataagatcatttatcgcacatagcacatcccagttaaatcaccntcgtccccacggatgccccccctcagatgggaatcccttgaacaccatcctccgtgaaatcaatatcccgcacaagagtgctactcccctcgctccgggcccatgacac"]
ape_sequences = zip sequences labels
label_seq_dict = Map.fromList ape_sequences


{- treeBuilder sequences
   Create phylogenetic tree in Newick format. 
   PRE: sequences contains at least one sequence longer than 3 symbols.
   RETURN: Newick format of phylogenetic tree from sequences.
 -}
treeBuilder :: [String] -> String
treeBuilder seqs = newickFormat (phylo_tree!!0) where
    
    -- Create guide tree by clustering sequences based on k-mer distance matrix.
    guide_tree = upgmaClustering seqs False
    
    -- Traverse guide tree and apply NWA to generate MSA. 
    msa = treeTraversal (guide_tree!!0)

    -- Create phylogenetic tree by clustering sequences in MSA with Jukes-Cantor distance measure. 
    phylo_tree = upgmaClustering msa True