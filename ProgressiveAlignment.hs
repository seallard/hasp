module ProgressiveAlignment where

import Test.HUnit
import Data.Array
import qualified Data.Set as Set
import qualified Data.Map as Map
import UPGMA
import Distances
import Needleman

-- Sequences and their labels to build phylogenetic tree from (no parser implemented).
labels = ["Chimp_Verus","Chimp_Trogl","Europ_human","Orangu_Jari","Gor_Eastern","Neanthe_Rus","Orangu_Puti","Chimp_Velle","Chimp_Schew","Neanthe_Ger","Gor_Mountai","Gor_Western"]
sequences = ["ctgccagtcaccatgaatattgtacagtaccataatcacccaactacctataatacataaaatccactcccacaccaaaaccttcaccccatgcttacaagcacgcacaacaatcaacctccaactgtcaaacataaaacacaactccaacgacacccctcccccaccccgataccaacagacctaccccccttgacagaacatagtacatacaatcatacaccgtacatagcacattacagtcaaactcttcctcgtccccacggatgccccccctcagatagg","cctaagtattggcctattcattacaaccgctatgtatttcgtacattactgccagccaccatgaatattgtacagtactataaccactcaactacctataatacattaagcccacccccacattacaacctccaccctatgcttacaagcacgcacaacaatcaacccccaactgtcacacataaaatgcaactccaaagacacccctctcccaccccgataccaacaaacctatgcccttttaacagtacatagtacatacagccgtacatcgcacatagcacattacagtcaaatccatccttgcccccacggatgccccccctcagatagg","ccaagtattgacttacccatcaacaaccgctatgtatttcgtacattactgccagccaccatgaatattgcacggtaccataaatacttgaccacctgtagtacataaaaacccaatccacatcaaaaccccctccccatgcttacaagcaagtacagcaatcaaccctcaactatcacacatcaactgcaactccaaagccacccctcacccactaggataccaacaaacctacccacccttaacagtacatagtacataaagccatttaccgtacatagcacattacagtcaaatcccttctcgtccccatggatgacccccctca","ccaatactgacccatttctaacggcctatgtatttcgtacattcctgctagccaacatgaatatcacccaacacaacaatcgcttaaccaactataatgcatacaaaactccaaccacactcgacctccacaccccgcttacaagcaagtacccccccatgcccccccacccaaacacatacaccgatctctccacataacccctcaacccccagcatatcaacagaccaaacaaaccttaaagtacatagcacatactatcctaaccgcacatagcacatcccgttaaaaccctgctcatccccacggatgccccccctcagttagtaatccctt","cctaagtattagttaacccaccaataattgtcatgtatttcgtgcattactgccagccaccatgaataatgtacggtaccataaacactccctcacctataatacattaccccccctcaccccccatcccttgcccaccccaacagcataccaactaacctacccctctacaaaagtacatagtacataaaatcatttaccgtccatagcacattccagttaaaccatcctcgcccccacggatgccccccctcagataggggtcccttaaacaccatcctccgtgaaatcaatatcccgcacaagagtgctactctcctcgctccgggcccataacgcctgg","ccaagtattgactcacccatcaacaaccgccatgtatttcgtacattactgccagccaccatgaatattgtacagtaccataattacttgactacctgtaatacataaaaacctaatccacatcaaccccccccccccatgcttacaagcaagcacagcaatcaaccttcaactgtcatacatcaactacaactccaaagacacccttacacccactaggatatcaacaaacctacccacccttgacagtacatagcacataaagtcatttaccgtacatagcacattatagtcaaatcccttctcgcccccatggatgacccccctcagataggggtcccttga","ccagtactgacccatttctaacggcctatgtatttcgtacattcctgctagccaacatgaatatcacccaacacaacaatcgcttaaccaactataatgcatacaaaactccaaccacactcgacctccacaccccgcttacaagcaagtacccccccatgcccccccacccaaacacatacaccgatctctccacataacccctcaacccccagcatatcaacagaccaaacaaaccttaaagtacatagcacatactatcctaaccgcacatagcacatcccgttaaaaccctgctcatccccacggatgccccccctcagttagtaatcccttactcac","cctaagtactggctcattcattacaaccgctatgtatttcgtacattactgccagccaccatgaatattgtacagtaccacaatcactcaactacctataatacataaaacccacccccacatcaaaacctccaccccatgcttacaagcatgcacaacaatcaacccccaactgtcgaacataaaacacaactccaacgacattcctacccactccgataccaacagacttattcctccttaataggacatagcacatacaatcacacaccgtacatagcacattacagtcaaatccatcctcgcccccacggatgacccccctcagata","cctaagtattggcttattcattacaaccgctatgtatttcgtacattactgccagccaccatgaatattgtacagtactataatcactcaactacctataatacatcaaacccaccccacattacaacctccaccctatgcttacaagcacgcacaacaattaaccctcaactgtcacacataaaacacaactccaaagacattcctcccccaccccgataccaacagacctatactctcttaacagtacatagtacatacaaccgtacaccatacatagcacattacagtcaaatccatcctcgcccccacggatgccccccctcagatagg","ccaagtattgactcacccatcagcaaccgctatgtatctcgtacattactgttagttaccatgaatattgtacagtaccataattacttgactacctgcagtacataaaaacctaatccacatcaaacccccccccccatgcttacaagcaagcacagcaatcaaccttcaactgtcatacatcaactacaactccaaagacgcccttacacccactaggatatcaacaaacctacccacccttgacagtacatagcacataaagtcatttaccgtacatagcacattacagtcaaatcccttctcgcccccatggatgacccccctcagataggggtcccttgat","ccaagtattagttaacccaccaataattgtcatgtatgtcgtgcattactgccagccaccatgaataatgtacagtaccacaaacactcccccacctataatacattaccccccctcaccccccattccctgctcaccccaacggcataccaaccaacctatcccctcacaaaagtacataatacataaaatcatttaccgtccatagtacattccagttaaaccatcctcgcccccacggatgccccccttcagatagggatcccttaaacaccatcctccgtgaaatcaatatcccgcacaagagtgctactctcctcgctccgggcccataacacctgg","ccaagtattagctaacccatcaataattatcatgtatatcgtgcatcactgccagacaccatgaataatgtacggtaccataaacgcccaatcacctgtagcacatacaaccccccccttccccccccccgcattgcccaacggaatacnaaataacccatccctcacaaaaagtacataacacataagatcatttatcgcacatagcacatcccagttaaatcaccntcgtccccacggatgccccccctcagatgggaatcccttgaacaccatcctccgtgaaatcaatatcccgcacaagagtgctactcccctcgctccgggcccatgacac"]
ape_sequences = zip sequences labels
dictionary = Map.fromList ape_sequences


{- treeTraversal guidetree
   Creates multiple sequence alignment (MSA) by traversing the guide tree and applying NWA.
   RETURNS: MSA of sequences in leaves of guidetree.
   VARIANT: number of nodes not visited.
 -}
treeTraversal :: UPGMATree -> [String]
treeTraversal (Node l str v r) = traceBack (treeTraversal l) (treeTraversal r)
treeTraversal (Leaf seq v) = [seq]

{- newickFormat tree
   Create Newick format of UPGMA tree.
   PRE: tree is non-empty.
   RETURN: tree in Newick format.
   VARIANT: tree will eventually be just a leaf.
 -}
newickFormat :: UPGMATree -> String
newickFormat (Node l str v r) = "(" ++ (newickFormat l) ++ ":" ++ (show (edgeLength (Node l str v r) l)) ++ "," ++ (newickFormat r)++ ":" ++ (show (edgeLength (Node l str v r) r)) ++")"
newickFormat (Leaf seq v) = sequenceToLabel seq

--sequenceToLabel :: String -> String
sequenceToLabel seq = case (Map.lookup (filter (/='-') seq) dictionary) of
        Just value -> value
        Nothing    -> "Error"

{- edgeLength node1 node2
   Calculate length of edge between nodes.
   RETURNS: length of edge between node1 and node2.
 -}
edgeLength :: UPGMATree -> UPGMATree -> Double
edgeLength nodeA nodeB = (extractHeight nodeA) - (extractHeight nodeB)